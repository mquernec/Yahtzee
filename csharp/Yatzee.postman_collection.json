{
	"info": {
		"_postman_id": "28cde4fd-894e-4880-81b2-b6aef3adbe8e",
		"name": "Yatzee",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Full House",
			"item": [
				{
					"name": "Expect 28",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 28\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(28);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\r\n        \"5\",\r\n        \"5\",\r\n        \"6\",\r\n        \"6\",\r\n        \"6\"\r\n    ],\r\n    \"type\": \"fullHouse\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 7\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(7);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"2\", \"1\", \"1\", \"1\"],\r\n    \"type\": \"fullHouse\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0 (all same)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"3\", \"3\", \"3\", \"3\", \"3\"],\r\n    \"type\": \"fullHouse\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0 (bad combination)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"3\", \"3\", \"4\", \"3\", \"3\"],\r\n    \"type\": \"fullHouse\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Straight",
			"item": [
				{
					"name": "Expect 20 (large)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(20);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    \"type\": \"largeStraight\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0 (large)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"3\", \"4\", \"5\", \"5\"],\r\n    \"type\": \"largeStraight\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 15 (small)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 15\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(15);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"3\", \"4\", \"5\", \"1\"],\r\n    \"type\": \"smallStraight\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0 (small)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"3\", \"4\", \"1\", \"1\"],\r\n    \"type\": \"smallStraight\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Four of a kind",
			"item": [
				{
					"name": "Expect 24",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 24\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(24);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"6\", \"3\", \"6\", \"6\", \"6\"],\r\n    \"type\": \"fourOfAKind\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"3\", \"1\", \"1\", \"1\"],\r\n    \"type\": \"fourOfAKind\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 16 (yatzee)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 16\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(16);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"4\", \"4\", \"4\", \"4\"],\r\n    \"type\": \"fourOfAKind\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0 (bad combination)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"3\", \"4\", \"1\", \"1\"],\r\n    \"type\": \"fourOfAKind\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Three of a kind",
			"item": [
				{
					"name": "Expect 18",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 18\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(18);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"3\", \"6\", \"6\", \"6\"],\r\n    \"type\": \"threeOfAKind\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"6\", \"3\", \"1\", \"1\", \"1\"],\r\n    \"type\": \"threeOfAKind\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 12 (yatzee)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 12\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(12);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"4\", \"4\", \"4\", \"4\"],\r\n    \"type\": \"threeOfAKind\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0 (bad combination)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"3\", \"4\", \"1\", \"1\"],\r\n    \"type\": \"smallStraight\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Two pairs",
			"item": [
				{
					"name": "Expect 22",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 22\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(22);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"5\", \"5\", \"6\", \"6\"],\r\n    \"type\": \"twoPair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 6\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(6);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"6\", \"2\", \"2\", \"1\", \"1\"],\r\n    \"type\": \"twoPair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 14 (full)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 14\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(14);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"4\", \"3\", \"4\", \"3\"],\r\n    \"type\": \"twoPair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0 (bad combination)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"3\", \"4\", \"1\", \"1\"],\r\n    \"type\": \"twoPair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0 (four of kind)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"3\", \"1\", \"1\", \"1\"],\r\n    \"type\": \"twoPair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pairs",
			"item": [
				{
					"name": "Expect 12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 12\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(12);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"5\", \"3\", \"6\", \"6\"],\r\n    \"type\": \"pair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"6\", \"5\", \"2\", \"1\", \"1\"],\r\n    \"type\": \"pair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 8 (full)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 8\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(8);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"4\", \"3\", \"4\", \"3\"],\r\n    \"type\": \"pair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0 (bad combination)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"3\", \"4\", \"2\", \"6\"],\r\n    \"type\": \"pair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sixes",
			"item": [
				{
					"name": "Expect 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 30\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(30);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"6\", \"6\", \"6\", \"6\", \"6\"],\r\n    \"type\": \"sixes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 6\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(6);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"6\", \"5\", \"2\", \"1\", \"1\"],\r\n    \"type\": \"sixes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"4\", \"3\", \"4\", \"3\"],\r\n    \"type\": \"sixes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fives",
			"item": [
				{
					"name": "Expect 25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 25\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(25);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"5\", \"5\", \"5\", \"5\", \"5\"],\r\n    \"type\": \"fives\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 5\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"6\", \"5\", \"2\", \"1\", \"1\"],\r\n    \"type\": \"fives\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"4\", \"3\", \"4\", \"3\"],\r\n    \"type\": \"fives\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fours",
			"item": [
				{
					"name": "Expect 20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 20\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(20);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"4\", \"4\", \"4\", \"4\"],\r\n    \"type\": \"fours\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"5\", \"2\", \"1\", \"1\"],\r\n    \"type\": \"fours\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"2\", \"3\", \"5\", \"3\"],\r\n    \"type\": \"fours\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Threes",
			"item": [
				{
					"name": "Expect 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 15\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(15);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"3\", \"3\", \"3\", \"3\", \"3\"],\r\n    \"type\": \"threes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"5\", \"2\", \"1\", \"3\"],\r\n    \"type\": \"threes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"2\", \"4\", \"5\", \"6\"],\r\n    \"type\": \"threes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Twos",
			"item": [
				{
					"name": "Expect 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 10\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(10);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"2\", \"2\", \"2\", \"2\"],\r\n    \"type\": \"twos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"5\", \"2\", \"1\", \"3\"],\r\n    \"type\": \"twos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"3\", \"4\", \"5\", \"6\"],\r\n    \"type\": \"twos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ones",
			"item": [
				{
					"name": "Expect 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 5\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"1\", \"1\", \"1\", \"1\"],\r\n    \"type\": \"ones\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"4\", \"5\", \"2\", \"1\", \"3\"],\r\n    \"type\": \"ones\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    \"type\": \"ones\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Yatzee",
			"item": [
				{
					"name": "Expect 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 50\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(50);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"6\", \"6\", \"6\", \"6\", \"6\"],\r\n    \"type\": \"yatzee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 50\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(50);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"1\", \"1\", \"1\", \"1\"],\r\n    \"type\": \"yatzee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 0 (bad combination)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"3\", \"4\", \"1\", \"1\"],\r\n    \"type\": \"yatzee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chance",
			"item": [
				{
					"name": "Expect 30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 30\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(30);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"6\", \"6\", \"6\", \"6\", \"6\"],\r\n    \"type\": \"chance\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 15",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 15\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(15);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\r\n    \"type\": \"chance\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be 5\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"1\", \"1\", \"1\", \"1\"],\r\n    \"type\": \"chance\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Limites",
			"item": [
				{
					"name": "Too many dice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.be.error\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be absent\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.be.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    \"type\": \"chance\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Null dice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.be.error\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be absent\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.be.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"1\", \"2\", null, \"4\", \"5\"],\r\n    \"type\": \"yatzee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Face out of range (too high)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.be.error\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be absent\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.be.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"2\", \"17\", \"2\", \"2\"],\r\n    \"type\": \"fourOfAKind\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Face out of range (too low)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.be.error\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be absent\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.be.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"2\", \"-7\", \"2\", \"2\"],\r\n    \"type\": \"threeOfAKind\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Face out of range (decimal value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.be.error\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be absent\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.be.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"2\", \"3.5\", \"2\", \"2\"],\r\n    \"type\": \"pair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not a number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.be.error\r",
									"});\r",
									"\r",
									"pm.test(\"Score should be absent\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.score).to.be.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roll\": [\"2\", \"trois\", \"3\", \"2\", \"2\"],\r\n    \"type\": \"twoPair\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost",
			"type": "default"
		},
		{
			"key": "context",
			"value": "yatzee",
			"type": "default"
		},
		{
			"key": "port",
			"value": "8080",
			"type": "default"
		},
		{
			"key": "protocol",
			"value": "http",
			"type": "default"
		},
		{
			"key": "baseUrl",
			"value": "{{protocol}}://{{host}}:{{port}}/{{context}}",
			"type": "default"
		}
	]
}